Index: api/templates/base.html
===================================================================
diff --git a/api/templates/base.html b/api/templates/base.html
deleted file mode 100644
--- a/api/templates/base.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,51 +0,0 @@
-<!doctype html>
-<html lang="en">
-  <head>
-    <!-- Required meta tags -->
-    <meta charset="utf-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
-
-    <link rel="stylesheet" href="{{ url_for('static', filename= 'css/style.css') }}">
-    <link href="{{ url_for('static', filename= 'css/style/main-built.css') }}" rel="stylesheet">
-    <link href="{{ url_for('static', filename= 'css/style/main.css') }}" rel="stylesheet">
-
-    <!--<link rel="stylesheet" href="{{ url_for('static', filename= 'css/create.css') }}">-->
-    <!-- Bootstrap CSS -->
-    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
-
-    <title>{% block title %} {% endblock %}</title>
-  </head>
-  <body>
-    <div class="egg">
-    <nav class="navbar navbar-expand-md navbar-light bg-light">
-      <a class="navbar-brand" href="{{ url_for('home')}}">Flavors Blog</a>
-        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
-            <span class="navbar-toggler-icon"></span>
-        </button>
-        <div class="collapse navbar-collapse" id="navbarNav">
-            <ul class="navbar-nav">
-            <li class="nav-item active">
-                <a class="nav-link" href="#">About</a>
-            </li>
-            <li class="nav-item">
-              <a class="nav-link" href="{{url_for('create')}}">New Recipe</a>
-            </li>
-            </ul>
-        </div>
-    </nav>
-    <!--<div class="container">-->
-    <div>
-      {% for message in get_flashed_messages() %}
-        <div class="alert alert-danger">{{ message }}</div>
-      {% endfor %}
-      {% block content %} {% endblock %}
-    </div>
-    </div>
-
-    <!-- Optional JavaScript -->
-    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
-    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
-    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
-    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
-  </body>
-</html>
Index: api/static/css/create.css
===================================================================
diff --git a/api/static/css/create.css b/api/static/css/create.css
deleted file mode 100644
--- a/api/static/css/create.css	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,220 +0,0 @@
-@font-face {
-    font-family: 'gotham-black';
-    src: url("/static/fonts/Gotham-Black.otf");
-}
-@font-face {
-    font-family: 'gotham-medium';
-    src: url("/static/fonts/GothamMedium.ttf");
-}
-@font-face {
-    font-family: 'onest-regular';
-    src: url("/static/fonts/Onest-Regular.ttf");
-}
-
-@font-face {
-    font-family: 'onest-black';
-    src: url("/static/fonts/Onest-Black.ttf");
-}
-
-html, body {
-    max-width: 100%;
-    overflow-x: hidden;
-    font-family: 'onest-regular', sans-serif;
-}
-
-h1, h2 {
-    font-family: 'onest-black', sans-serif;
-    }
-p {
-    font-family: 'onest-regular', sans-serif;
-}
-/*input {
-    text-align: center;
-    font-family: monospace;
-    font-size: 15px;
-    border: 3px solid black;
-    width: 350px;
-    height: 30px;
-}
-textarea {
-    text-align: center;
-    font-family: monospace;
-    font-size: 15px;
-    border: 3px solid black;
-    width: 350px;
-    height: 30px;
-}
-
-.textarea {
-    resize: vertical;
-    
-}
-textarea:focus {
-    border: 3px solid #ff4141;
-    transition: .5s ease-in;
-}*/
-
-.discl {
-    font-weight: bold;
-}
-
-/*.ingred_btn {
-    background-color: DodgerBlue;
-    border: 1px solid DodgerBlue;
-    border-radius: 10px;
-    color: white;
-    padding: 12px 16px;
-    font-size: 16px;
-    cursor: pointer;
-  }*/
-
-.close {
-    padding-top: 10px;
-}
-.second_btn {
-    background-color: #007aff;
-    border: 1px solid #007aff;
-    border-radius: 10px;
-    color: white;
-    padding: 10px 16px;
-    font-size: 16px;
-    cursor: pointer;
-  }
-
-.add {
-    padding-top: 20px;
-  }
-
-a {
-    padding-right: 15px;
-}
-
-.add_btn {
-    color: white;
-    text-decoration: none;
-}
-
-.add_btn:hover {
-    color: white;
-    text-decoration: none;
-}
-  
-  /* Darker background on mouse-over */
-.second_btn:hover {
-    background-color: #0072ed;
-    border: 1px solid #0072ed;
-}
-
-.delete {
-    padding-bottom: 30px;
-}
-
-.add_btn_instruct {
-    color: white;
-    text-decoration: none;
-}
-
-.third_btn {
-    background-color: #007aff;
-    border: 1px solid #007aff;
-    border-radius: 10px;
-    color: white;
-    padding: 10px 16px;
-    font-size: 16px;
-    cursor: pointer;
-  }
-
-.third_btn:hover {
-    background-color: #0072ed;
-    border: 1px solid #0072ed;
-}
-
-.instruct_delete {
-    padding-bottom: 30px;
-}
-
-/*code {
-    padding: 20px 20px 0 20px;
-}*/
-/*.box {
-    width: 100%;
-    height: 30%;
-    border: 3px solid black;      
-}
-
-.instruct_btn {
-    font-family: 'gotham-black', sans-serif;
-    height: 30px;
-    width: 60px;
-    color: black;
-    background-color: white;
-    border: 3px solid black;
-    text-align: center;
-    display: inline-block;
-    
-}
-
-.instruct_btn:hover {
-    color: white;
-    background-color: black;
-}
-
-.rep_post {
-    display: flex;
-    flex-direction: column;
-    justify-content: space-around;
-    flex: 3;
-    margin-bottom: 60px;
-}*/
-
-label {
-    font-family: 'onest-regular', sans-serif;
-    font-size: 25px;
-    /*padding: 30px 0 5px 0;*/
-}
-
-.title {
-    padding-bottom: 30px;
-}
-
-/*.ingredients {
-    display: flex;
-    flex-direction: row;
-    justify-content: space-between;
-    flex: 3;
-    justify-content: left;
-}
-
-.ingred_ipt {
-    margin-right: 20px;
-}
-
-.instructions {
-    display: flex;
-    flex-direction: row;
-    justify-content: space-between;
-    flex: 3;
-    justify-content: left;
-}
-
-.instruct_ipt {
-    margin-right: 20px;
-}
-
-.ingred_btn {
-    font-family: 'gotham-black', sans-serif;
-    height: 30px;
-    width: 60px;
-    color: black;
-    background-color: white;
-    border: 3px solid black;
-    text-align: center;
-    display: inline-block;
-    overflow-y: hidden;
-    overflow: hidden;
-}
-
-.ingred_btn:hover {
-    color: white;
-    background-color: black;
-}*/
\ No newline at end of file
Index: api/templates/create.html
===================================================================
diff --git a/api/templates/create.html b/api/templates/create.html
deleted file mode 100644
--- a/api/templates/create.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,63 +0,0 @@
-<meta name="viewport" content="width=device-width, initial-scale=1">
-<!-- Add icon library -->
-<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
-<link rel="stylesheet" href="{{ url_for('static', filename= 'css/create.css') }}">
-{% extends 'base.html' %}
-
-{% block content %}
-<h1 class="title">{% block title %} Create a New Recipe {% endblock %}</h1>
-<form method="POST">
-    <div class="form-group">
-        <label for="title">Title</label>
-        <input type="text" name="title"
-               placeholder="Recipe Title" class="form-control"
-               value="{{ request.form['title'] }}"></input>
-    </div>
-
-    
-
-    <div class="form-group">
-        
-        <label for="ingredients">Ingredients</label>
-        <textarea name="ingredients" placeholder="Ingredients"
-                  class="form-control">{{ request.form['ingredients'] }}</textarea>
-        <div class="add">
-            <button class="second_btn" name='ingredients'>Add</button>
-        </div>
-        
-    </div>
-    <div class="delete">
-        <button class="second_btn"><a> {{ ingredients }}</a><i class="fa fa-close"></i> </button>
-    </div>
-
-    <div class="form-group">
-        <label for="servings">Servings</label>
-        <input type="text" name="servings"
-               placeholder="Servings" class="form-control"
-               value="{{ request.form['servings'] }}"></input>
-    </div>
-
-    <div class="form-group">
-        <label for="instructions">Instructions</label>
-        <textarea name="instructions" placeholder="Instructions"
-                  class="form-control">{{ request.form['instructions'] }}</textarea>
-        <div class="add_instruct">
-            <button class="second_btn" name='instructions'>Add</button>
-        </div>
-    </div>
-    <div class="instruct_delete">
-        <button class="third_btn"><a> {{ instructions }}</a><i class="fa fa-close"></i> </button>
-    </div>
-
-    <div class="form-group">
-        <button type="submit" class="btn btn-primary">Submit</button>
-    </div>
-</form>
-
-<div class="box">
-    <code><span class='discl'>Disclaimer:</span><br><br>
-        1. When posting a recipe on our website, this means you are the sole creator of that recipe.<br>
-        2. Once your recipe is inserted onto our database. Flavor will have full copyright over it or them. Meaning, Flavor could publish, distribute, sell, modify, delete, ...<br>   
-    </code>
-</div>
-{% endblock %}
Index: api/flavorsapi.py
===================================================================
diff --git a/api/flavorsapi.py b/api/flavorsapi.py
deleted file mode 100644
--- a/api/flavorsapi.py	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,1230 +0,0 @@
-#!flask/bin/python
-#from flask_cors import CORS
-'''from flask import Flask, request, jsonify, abort, make_response, url_for, render_template, flash, redirect, send_file
-from bs4 import BeautifulSoup
-
-#import sqlite3
-import psycopg2
-import psycopg2.extras
-import os
-import requests
-import time
-import io
-
-
-
-app = Flask(__name__)
-app.config['SECRET_KEY'] = 'your secret key' '''
-
-#CORS(app, resources={r"/*": {"orgins": "*"}})
-
-#in_memory_datastore = {
-#   "COBOL": {"name": "COBOL", "publication_year": 1960, "contribution": "record data"},
-#   "ALGOL": {"name": "ALGOL", "publication_year": 1958, "contribution": "scoping and nested functions"},
-#   "APL": {"name": "APL", "publication_year": 1962, "contribution": "array processing"},
-#   "BASIC": {"name": "BASIC", "publication_year": 1964, "contribution": "runtime interpretation, office tooling"},
-#   "PL": {"name": "PL", "publication_year": 1966, "contribution": "constants, function overloading, pointers"},
-#   "SIMULA67": {"name": "SIMULA67", "publication_year": 1967,
-#                "contribution": "class/object split, subclassing, protected attributes"},
-#   "Pascal": {"name": "Pascal", "publication_year": 1970,
-#              "contribution": "modern unary, binary, and assignment operator syntax expectations"},
-#   "CLU": {"name": "CLU", "publication_year": 1975,
-#           "contribution": "iterators, abstract data types, generics, checked exceptions"},
-#}
-
-#@app.route('/programming_languages', methods=['GET', 'POST'])
-#def programming_languages_route():
-#   if request.method == 'GET':
-#       return list_programming_languages()
-#   elif request.method == "POST":
-#       return create_programming_language(request.get_json(force=True))
-
-#def list_programming_languages():
-#   before_year = request.args.get('before_year') or '30000'
-#   after_year = request.args.get('after_year') or '0'
-#   qualifying_data = list(
-#       filter(
-#           lambda pl: int(before_year) > pl['publication_year'] > int(after_year),
-#           in_memory_datastore.values()
-#       )
-#   )
-
-#   return {"programming_languages": qualifying_data}
-
-#def create_programming_language(new_lang):
-#   language_name = new_lang['name']
-#   in_memory_datastore[language_name] = new_lang
-#   return new_lang
-
-#@app.route('/programming_languages/<programming_language_name>', methods=['GET', 'PUT', 'DELETE'])
-#def programming_language_route(programming_language_name):
-#   if request.method == 'GET':
-#       return get_programming_language(programming_language_name)
-#   elif request.method == "PUT":
-#       return update_programming_language(programming_language_name, request.get_json(force=True))
-#   elif request.method == "DELETE":
-#       return delete_programming_language(programming_language_name)
-
-#def get_programming_language(programming_language_name):
-#   return in_memory_datastore[programming_language_name]
-
-#def update_programming_language(lang_name, new_lang_attributes):
-#   lang_getting_update = in_memory_datastore[lang_name]
-#   lang_getting_update.update(new_lang_attributes)
-#   return lang_getting_update
-
-#def delete_programming_language(lang_name):
-#   deleting_lang = in_memory_datastore[lang_name]
-#   del in_memory_datastore[lang_name]
-#   return deleting_lang
-
-
-#def connect_to_db():
-#    conn = sqlite3.connect("flavor_api_database.db")
-#    conn.row_factory = sqlite3.Row
-#    print("Connecting to database")
-#    return conn
-
-#def create_db_table():
-#    try:
-#        conn = connect_to_db()
-#        conn.execute('''
-#            CREATE TABLE recipes (
-#                id INT PRIMARY KEY NOT NULL,
-#                title VARCHAR(155) NOT NULL,
-#                ingredients VARCHAR(155),
-#                servings CHAR(20), 
-#                instructions VARCHAR(255)
-#            );
-#        ''')
-#        conn.commit()
-#        print("Recipe table created successfully")
-#    except:
-#        print("Recipe table creation failed")
-#    finally:
-#        conn.close()
-
-#def insert_recipe(recipe):
-#    inserted_recipes = {}
-#    try:
-#        conn = connect_to_db()
-#        cur = conn.cursor()
-#        cur.execute("INSERT INTO recipes (id, title, ingredients, servings, instructions) VALUES(?, ?, ?, ?, ?)", (recipe['id'], recipe['title'], recipe['ingredients'], recipe['servings'], recipe['instructions'], recipe['instructions']))
-#        conn.commit()
-#        inserted_recipes = get_recipe_by_id(cur.lastrowid)
-#        print ('inserted')
-#    except:
-#        conn.rollback()
-#    finally:
-#        conn.close()
-#    return inserted_recipes
-
-#def get_recipe():
-#    recipes = []
-#    try:
-#        conn = connect_to_db()
-#        conn.row_factory = sqlite3.Row
-#        cur = conn.cursor()
-#        cur.execute("SELECT * FROM recipes")
-#        rows = cur.fetchall()
-
-#        for i in rows:
-#            recipe = {}
-#            recipe["id"] = i["id"]
-#            recipe["title"] = i["title"]
-#            recipe["ingredients"] = i["ingredients"]
-#            recipe["servings"] = i["servings"]
-#            recipe["instructions"] = i["nstructions"]
-#            recipes.append(recipe)
-#    except:
-#        recipes = []
-
-#    return recipes
-
-#def get_recipe_by_id(title):
-#    recipe = {}
-#    try:
-#        conn = connect_to_db()
-#        conn.row_factory = sqlite3.Row
-#        cur = conn.cursor()
-#        cur.execute("SELECT * FROM recipes WHERE title = ?", (title,))
-#        row = cur.fetchone()
-
-#        recipe["id"] = row["id"]
-#        recipe["title"] = row["title"]
-#        recipe["ingredients"] = row["ingredients"]
-#        recipe["servings"] = row["servings"]
-#        recipe["instructions"] = row["instructions"]
-#    except:
-#        recipe = {}
-
-#    return recipe
-
-#recipes = []
-
-#recip1 =    {
-#      "title":"Stracciatella (Italian Wedding Soup)",
-#      "ingredients":"3 1/2 c Chicken broth; homemade|1 lb Fresh spinach; wash/trim/chop|1 Egg|1 c Grated parmesan cheese; --or--|1 c Romano cheese; freshly grated|Salt and pepper; to taste",
-#      "servings":"4 servings",
-#      "id": 1,
-#      "instructions":"Bring 1 cup of the broth to a boil. Add spinach and cook until softened but still bright green. Remove spinach with a slotted spoon and set aside. Add remaining broth to pot. Bring to a boil. Meanwhile, beat egg lightly with a fork. Beat in 1/4 cup of cheese. When broth boils pour in egg mixture, stirring constantly for a few seconds until it cooks into 'rags.'' Add reserved spinach, salt and pepper. Serve immediately, passing remaining cheese. NOTES: Someone asked for this recipe a while back. I believe this soup, known as 'Stracciatella' is synonymous with Italian Wedding Soup, however, I seem to remember from I-don't-know-where that Italian Wedding Soup is the same as this but with the addition of tiny meatballs."
-#    }
-#recip2 =      {
-#      "title": "Need to find a good Python tutorial on the web",
-#      "ingredients": "Stuff",
-#      "servings": "4 servings",
-#      "id": 2,
-#      "instructions": "Learn Python"
-#    }
-
-#recipes.append(recip1)
-#recipes.append(recip2)
-
-#@app.route('/flavors/api/recipes', methods=['GET'])
-#def api_recipe_list():
-#  return jsonify(get_recipe())
-
-#@app.route('/flavors/api/recipes/<title>', methods=['GET'])
-#def api_recipes_list(title):
-#  return jsonify(get_recipe_by_id(title))
-
-#@app.route('/flavors/api/recipes/add', methods=['POST'])
-#def api_add_recipe_list():
-#    recipe = request.get_json()
-#    return jsonify(insert_recipe(recipe))
-'''try: 
-    #url = 'https://www.recipe-free.com/recipes/easy-swedish-meatballs---jamie-oliver-recipe/129381'
-    #url = 'https://www.recipe-free.com/recipes/best-african-vegetarian-stew/129364'
-    #url = 'https://www.recipe-free.com/recipes/real-coconut-chicken-tenders-recipe-joel-robuchon-recipe/129450'
-    #result = requests.get(url).text
-
-    #url = 'https://www.recipe-free.com/recipes/easy-swedish-meatballs---jamie-oliver-recipe/129381'
-
-
-    #result = requests.get(url).text
-
-    #doc = BeautifulSoup(result, 'html.parser')
-
-
-    #rtitle = doc.find('h1', {'class': 'red'}).text.strip()
-    #ringredients = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[0].text.strip()
-    #rservings = doc.find('div', {'class': 'times'}).findAll('div', {'class': 'times_tab'})[1].findAll('div', {'class': 'f12 f12'})[1].text.strip()
-    #rinstructions = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[1].text.strip()
-    #print(f'title: {rtitle}')
-    #print(f'ingredients: {ringredients}')
-    #print(f'servings: {rservings}')
-    #print(f'instructions: {rinstructions}')
-
-    page = 1
-    url_no = 1
-    titles = []
-    links = []
-    links_dict = {}
-
-    while page != 7:
-        url = f"https://www.recipe-free.com/categories/meat-recipes/{page}"
-        # print(url)
-        response = requests.get(url)
-        html = response.content
-        soup = BeautifulSoup(html, "lxml")
-        for a in soup.find('div', {'class': 'category_content centerindent for-this'}).findAll('a', {'class': 'day'}):
-            titles.append(a.get_text(strip=True))
-            links.append(a.get('href'))
-            # print(titles)
-        page = page + 1
-    for title in titles[:80]:
-        print(title)
-    for i, link in enumerate(links[:120], url_no):
-        # print(f'url {url_no}: {link}')
-        name = f'url {url_no}'
-        links_dict = {name: link}
-        # links_dict = {f'url {url_no}': link}
-        url_no += 1
-        # for dict in links_dict:
-        # print(links_dict)
-        print(links_dict[name])
-        # code to get info from each link stored in links_dict
-        url_grapper = links_dict[name]
-        result = requests.get(url_grapper).text
-        doc = BeautifulSoup(result, 'html.parser')
-        # Extract image URL
-        image_tag = doc.find('div', {'class': 'col-md-4 col-sm-4'}).findAll('div')[0].findAll('img')[0]
-        image_url = image_tag['src']
-        image_url_fixed = image_url.replace('../..', '')
-        base_url = 'https://www.recipe-free.com'
-        rimage_url = base_url + image_url_fixed
-        try:
-            rimage = requests.get(rimage_url).content  # Fetch image data
-        except requests.exceptions.RequestException as e:
-            print(f"Error! Failed to fetch image from {rimage_url}: {e}")
-            rimage = None
-        # Extract other details
-        rtitle = doc.find('h1', {'class': 'red'}).text.strip()
-        ringredients = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[0].text.strip()
-        rservings = doc.find('div', {'class': 'times'}).findAll('div', {'class': 'times_tab'})[1].findAll('div', {
-            'class': 'f12 f12'})[1].text.strip()
-        rinstructions = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[1].text.strip()
-
-        #print(f'title: {rtitle}')
-        #print(f'ingredients: {ringredients}')
-        #print(f'servings: {rservings}')
-        #print(f'instructions: {rinstructions}')
-        print(f'images: {rimage_url}')
-
-
-        try:
-            DATABASE_URL = os.environ['DATABASE_URL']
-            conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-        except:
-            conn = psycopg2.connect(
-                host="localhost",
-                database="flavors_api",
-                user=os.environ['DB_USERNAME'],
-                password=os.environ['DB_PASSWORD'])
-
-        try:
-            cur = conn.cursor()'''
-            #query = '''INSERT INTO recipes(title, ingredients, servings, instructions, image) VALUES(%s, %s, %s, %s, %s)'''
-            #record_to_insert = (rtitle, ringredients, rservings, rinstructions, psycopg2.Binary(rimage) if rimage else None)
-            #cur.execute(query, record_to_insert)
-            #conn.commit()
-            #conn.close()
-        #except Exception as e:
-            #print(f"Failed to insert data: {e}")
-
-#except Exception as e:
-    #print(f"Failed to establish a new connection: {e}")
-
-
-#def in_data():
-
-
-
-
-#conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-
-#Row and column in database tables
-
-
-'''def dict_factory(cursor, row):
-    d = {}
-    for idx, col in enumerate(cursor.description):
-        d[col[0]] = row[idx]
-    return d
-
-# Home screen
-@app.route('/', methods=['GET'])
-def home():
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    #all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()
-    cur.execute('SELECT * FROM recipes;')
-    recipes = cur.fetchall()
-
-    return render_template('index.html', recipes=recipes)
-
-def get_recipe_id(rep_id):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    cur.execute('SELECT * FROM recipes WHERE rep_id = %s', (rep_id,))
-    recipes = cur.fetchone()
-
-    conn.close()
-    if recipes is None:
-        abort(404)
-    return recipes
-
-
-@app.route('/<int:rep_id>')
-def recipe_id(rep_id):
-    recipes = get_recipe_id(rep_id)
-    return render_template('recipes.html', recipes=recipes)
-
-
-@app.route('/create', methods=('GET', 'POST'))
-def create():
-    if request.method == 'POST':
-        title = request.form['title']
-        ingredients = request.form['ingredients']
-        servings = request.form['servings']
-        instructions = request.form['instructions']
-    
-
-        if not title:
-            flash('Title is required!')
-        if not ingredients:
-            flash('Ingredients is required!')
-        if not servings:
-            flash('Servings is required!')
-        if not instructions:
-            flash('Instructions is required!')
-        
-        else:
-            try:
-                DATABASE_URL = os.environ['DATABASE_URL']
-                conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-            except:
-                conn = psycopg2.connect(
-                    host="localhost", 
-                    database="flavors_api",
-                    user=os.environ['DB_USERNAME'],
-                    password=os.environ['DB_PASSWORD'])
-            cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)      
-            cur.execute('INSERT INTO recipes (title, ingredients, servings, instructions) VALUES (%s, %s, %s, %s)',
-                         (title, ingredients, servings, instructions))
-            conn.commit()
-            conn.close()
-            return redirect(url_for('home'))
-    
-    # Fix code below, ingredients add button triggers instructions button
-    ingredients = []
-    #instructions = []
-    
-    ingredients = ingredients.append(ingredients) 
-    ingredients = request.form.get('ingredients') 
-    
-    
-    #instructions = instructions.append(instructions) 
-    #instructions = request.form.get('instructions') 
-    return render_template('create.html', ingredients=ingredients)
- 
-@app.route('/flavors/api/recipes', methods=['GET'])
-def api_all():
-    #conn = sqlite3.connect('flavor_api_database.db')
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-        #host="localhost", 
-        #database="flavors_api",
-        #DB_USERNAME=os.environ['DB_USERNAME'],
-        #DB_PASSWORD=os.environ['DB_PASSWORD']
-        
-        #URL = os.environ.get('postgres://etryrrveyngcvx:7eb31e76ed3b8452749bada81b9058ee51cc902b7ea996b3a2b566ab841dbe5b@ec2-44-198-82-71.compute-1.amazonaws.com:5432/ddskfvmrts9ipg')
-        #DATABASE_URL=os.environ.get('postgres://etryrrveyngcvx:7eb31e76ed3b8452749bada81b9058ee51cc902b7ea996b3a2b566ab841dbe5b@ec2-44-198-82-71.compute-1.amazonaws.com:5432/ddskfvmrts9ipg -a flavorsapi')
-        
-    #conn.row_factory = dict_factory
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    #all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()
-    cur.execute('SELECT * FROM recipes;')
-    all_recipes = cur.fetchall()
-    return jsonify({'recipes': all_recipes})
-    #return validate(instance={'recipes': cur}, schema=all_recipes)
-
-# Error handling
-@app.errorhandler(404)
-def page_not_found(e):
-    return "<h1>404!</h1><p>Resource not found.</p>", 404
-
-# GET Requests
-@app.route('/flavors/api/recipes', methods=['GET'])
-def api_filter():
-    query_params = request.args
-
-    rep_id = query_params.get('rep_id')
-    title = query_params.get('title')
-    ingredients = query_params.get('ingredients')
-    servings = query_params.get('servings')
-    instructions = query_params.get('instructions')
-
-    query = "SELECT * FROM recipes WHERE"
-    to_filter = []
-
-    if rep_id:
-        query += 'rep_id=? AND' 
-        to_filter.append(rep_id)
-    if title:
-        query += 'title=? AND'
-        to_filter.append(title)
-    if ingredients:
-        query += 'ingredients=? AND'
-        to_filter.append(ingredients)
-    if servings:
-        query += 'servings=? AND'
-        to_filter.append(servings)
-    if instructions:
-        query += 'instructions=? AND'
-        to_filter.append(instructions)
-    if not (rep_id or title or ingredients or servings or instructions):
-        return page_not_found(404)
-
-    query = query[:-4] + ';'
-
-    #conn = sqlite3.connect('flavor_api_database.db')
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    #conn.row_factory = dict_factory
-    #cur = conn.cursor()
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-
-    cur.execute(query, to_filter)
-    results = cur.fetchall()
-    return jsonify(results)
-
-# Inserted user recipe(s)
-def insert_recipe(rep_id, title, ingredients, servings, instructions):
-    #conn = sqlite3.connect('flavor_api_database.db')
-    conn = get_db_connection()
-    cur = conn.cursor()
-    #cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    statement = "INSERT INTO recipes(rep_id, title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s, %s)"
-    cur.execute(statement, [rep_id, title, ingredients, servings, instructions])
-    conn.commit()
-    return True
-
-# Posted user recipe(s)
-@app.route('/flavors/api/recipes', methods=['GET', 'POST'])
-def api_post():
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    recipes = request.get_json()
- 
-    #rep_id = request.json['rep_id']
-    
-    title = request.json['title']
-    ingredients = request.json.get('ingredients', "")
-    servings = request.json.get('servings', "")
-    instructions = request.json.get('instructions', "")
-    #conn = sqlite3.connect('flavor_api_database.db')
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    #conn.execute('INSERT INTO recipes(id, title, ingredients, servings, instructions) VALUES(?, ?, ?, ?, ?)', (id, title, ingredients, servings, instructions))
-    cur.execute('INSERT INTO recipes(title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s);', (title, ingredients, servings, instructions))
-    conn.commit()
-    conn.close()
-    return jsonify({'recipe': recipes}), 201
-
-# Filter through recipes database
-#def get_recipe_by_id(rep_id):
-    #conn = sqlite3.connect('flavor_api_database.db')
-#    conn = psycopg2.connect(
-#        host="localhost", 
-#        database="flavors_api",
-#        user=os.environ['DB_USERNAME'],
-#        password=os.environ['DB_PASSWORD'])
-#    cursor = conn.cursor()
-#    statement = "SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?"
-#    cursor.execute(statement, [rep_id])
-#    return cursor.fetchone()
-
-# Access specific recipe by id
-@app.route('/flavors/api/recipes/<rep_name>', methods=['GET'])
-def get_recipes(rep_name):
-    #Old code
-    #========
-      #conn = psycopg2.connect(
-        #host="localhost", 
-        #database="flavors_api",
-        #user=os.environ['DB_USERNAME'],
-        #password=os.environ['DB_PASSWORD'])
-    #cur = conn.cursor()
-    #cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    #statement = "SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?"
-    #cur.execute("SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = %s", [rep_id])
-    #recipe = cur.fetchone()
-    #recipe = get_recipe_by_id(rep_id)
-    #return jsonify({'recipe': recipe}) #can change array position from 0 - 4 
-    #original return jsonify({'recipe': recipe})
-
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    
-
-    #cur = conn.cursor()
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    #statement = "SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?"
-    #cur.execute("SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE title = %s", [rep_name])
-    cur.execute("SELECT * FROM recipes;")
-    recipes = cur.fetchall()
-    
-    # .casefold ignores case strings (Whether uppercase or lower)
-    recipe = [recipe for recipe in recipes if rep_name.casefold() in recipe['title'].casefold() or rep_name.casefold() in recipe['ingredients'].casefold()]
-    #for recipe in recipes:
-    #    if rep_name in recipes:
-    #        break
-        
-    
-    return jsonify({'recipe': recipe}) #can change array position from 0 - 4          
-    #original return jsonify({'recipe': recipe})
-
-# Connect to database
-def get_db_connection():
-    #conn = sqlite3.connect('flavor_api_database.db')
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-    #conn.row_factory = sqlite3.Row
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    
-    print("Connecting to database...")
-    return cur
-
-def get_recipe(rep_name):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-    post = conn.execute('SELECT *FROM recipes WHERE title = %s', {'recipe': rep_name}).fetchone()
-    conn.close()
-    if post is None:
-        abort(404)
-    return post
-
-# Modify recipe
-@app.route("/flavors/api/recipes/<int:rep_id>", methods=["PUT"])
-def update_recipe(rep_id):
-    recipes_edit = request.get_json()
-    #code to update recipe in database by id (rep_id) postgresql using psycopg2.connect
-    #conn = sqlite3.connect('flavor_api_database.db')
-
-    #rep_id = request.json['rep_id']
-    #title = request.json.get('title', '')
-    #ingredients = request.json.get('ingredients', "")
-    #servings = request.json.get('servings', "")
-    #instructions = request.json.get('instructions', "")
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        db = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        db = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cursor = db.cursor()
-    cursor.execute("UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s", (recipes_edit['title'], recipes_edit['ingredients'], recipes_edit['servings'], recipes_edit['instructions'], rep_id))
-  
-    #statement =  "UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s"
-    #cursor.execute(statement, [title, ingredients, servings, instructions, rep_id])
-    db.commit()
-    return jsonify({'recipe': recipes_edit}), 201
-
-# Delete a recipe
-@app.route("/flavors/api/recipes/<int:rep_id>", methods=['DELETE'])
-def delete_recipe(rep_id):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        db = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        db = psycopg2.connect(
-            host="localhost", 
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cursor = db.cursor()
-    statement = "DELETE FROM recipes WHERE rep_id = %s"
-    cursor.execute(statement, [rep_id])
-    db.commit()
-    return ('Deleted'), 201
-
-
-@app.route('/recipe_image/<int:id>')
-def recipe_image(id):
-    conn = get_db_connection()
-    cur = conn.cursor()
-    cur.execute("SELECT image FROM recipes WHERE id = %s", (id,))
-    image_data = cur.fetchone()
-    conn.close()
-
-    if image_data is None or image_data[0] is None:
-        abort(404)
-
-    return send_file(
-        io.BytesIO(image_data[0]),
-        mimetype='image/jpeg',  # or the appropriate mime type
-        as_attachment=False,
-        download_name='recipe_image.jpg'  # or a meaningful name
-    )'''
-
-from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, abort
-from bs4 import BeautifulSoup
-import psycopg2
-import psycopg2.extras
-import requests
-import os
-import base64
-
-app = Flask(__name__)
-app.config['SECRET_KEY'] = 'your_secret_key'
-
-'''def get_db_connection():'''
-'''try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-    return conn'''
-
-'''def fetch_recipe_data(url):'''
-
-try:
-    page = 1
-    url_no = 1
-    titles = []
-    links = []
-    links_dict = {}
-
-    while page != 7:
-        url = f"https://www.recipe-free.com/categories/meat-recipes/{page}"
-        # print(url)
-        response = requests.get(url)
-        html = response.content
-        soup = BeautifulSoup(html, "lxml")
-        for a in soup.find('div', {'class': 'category_content centerindent for-this'}).findAll('a', {'class': 'day'}):
-            titles.append(a.get_text(strip=True))
-            links.append(a.get('href'))
-            # print(titles)
-        page = page + 1
-    for title in titles[:80]:
-        print(title)
-    for i, link in enumerate(links[:120], url_no):
-        # print(f'url {url_no}: {link}')
-        name = f'url {url_no}'
-        links_dict = {name: link}
-        # links_dict = {f'url {url_no}': link}
-        url_no += 1
-        # for dict in links_dict:
-        # print(links_dict)
-        print(links_dict[name])
-        # code to get info from each link stored in links_dict
-        url_grapper = links_dict[name]
-        result = requests.get(url_grapper).text
-        doc = BeautifulSoup(result, 'html.parser')
-        # Extract image URL
-        image_tag = doc.find('div', {'class': 'col-md-4 col-sm-4'}).findAll('div')[0].findAll('img')[0]
-        image_url = image_tag['src']
-        image_url_fixed = image_url.replace('../..', '')
-        base_url = 'https://www.recipe-free.com'
-        rimage_url = base_url + image_url_fixed
-        try:
-            rimage = requests.get(rimage_url).content  # Fetch image data
-        except requests.exceptions.RequestException as e:
-            print(f"Error! Failed to fetch image from {rimage_url}: {e}")
-            rimage = None
-        # Extract other details
-        rtitle = doc.find('h1', {'class': 'red'}).text.strip()
-        ringredients = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[0].text.strip()
-        rservings = doc.find('div', {'class': 'times'}).findAll('div', {'class': 'times_tab'})[1].findAll('div', {
-            'class': 'f12 f12'})[1].text.strip()
-        rinstructions = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[1].text.strip()
-
-        #print(f'title: {rtitle}')
-        #print(f'ingredients: {ringredients}')
-        #print(f'servings: {rservings}')
-        #print(f'instructions: {rinstructions}')
-        print(f'images: {rimage_url}')
-
-
-        try:
-            DATABASE_URL = os.environ['DATABASE_URL']
-            conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-        except:
-            conn = psycopg2.connect(
-                host="localhost",
-                database="flavors_api",
-                user=os.environ['DB_USERNAME'],
-                password=os.environ['DB_PASSWORD'])
-
-        try:
-            cur = conn.cursor()
-            query = '''INSERT INTO recipes(title, ingredients, servings, instructions, image) VALUES(%s, %s, %s, %s, %s)'''
-            record_to_insert = (rtitle, ringredients, rservings, rinstructions, psycopg2.Binary(rimage) if rimage else None)
-            cur.execute(query, record_to_insert)
-            conn.commit()
-            conn.close()
-        except Exception as e:
-            print(f"Failed to insert data: {e}")
-
-except Exception as e:
-    print(f"Failed to establish a new connection: {e}")
-
-
-# Home screen
-@app.route('/', methods=['GET'])
-def home():
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    #all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()
-    cur.execute('SELECT * FROM recipes;')
-    recipes = cur.fetchall()
-
-    return render_template('index.html', recipes=recipes)
-
-
-def get_recipe_id(rep_id):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-    cur.execute('SELECT * FROM recipes WHERE rep_id = %s', (rep_id,))
-    recipes = cur.fetchone()
-
-    conn.close()
-    if recipes is None:
-        abort(404)
-    return recipes
-
-
-@app.route('/<int:rep_id>')
-def recipe_id(rep_id):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-    cur.execute('SELECT * FROM recipes WHERE rep_id = %s', (rep_id,))
-    recipe = cur.fetchone()
-    cur.close()
-    conn.close()
-    if recipe is None:
-        abort(404)
-    return render_template('recipes.html', recipe=recipe)
-
-
-@app.route('/create', methods=('GET', 'POST'))
-def create():
-    if request.method == 'POST':
-        title = request.form['title']
-        ingredients = request.form['ingredients']
-        servings = request.form['servings']
-        instructions = request.form['instructions']
-
-        if not title:
-            flash('Title is required!')
-        if not ingredients:
-            flash('Ingredients is required!')
-        if not servings:
-            flash('Servings is required!')
-        if not instructions:
-            flash('Instructions is required!')
-
-        else:
-            try:
-                DATABASE_URL = os.environ['DATABASE_URL']
-                conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-            except:
-                conn = psycopg2.connect(
-                    host="localhost",
-                    database="flavors_api",
-                    user=os.environ['DB_USERNAME'],
-                    password=os.environ['DB_PASSWORD'])
-            cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-            cur.execute('INSERT INTO recipes (title, ingredients, servings, instructions) VALUES (%s, %s, %s, %s)',
-                        (title, ingredients, servings, instructions))
-            conn.commit()
-            conn.close()
-            return redirect(url_for('home'))
-
-    # Fix code below, ingredients add button triggers instructions button
-    ingredients = []
-    # instructions = []
-
-    ingredients = ingredients.append(ingredients)
-    ingredients = request.form.get('ingredients')
-
-    # instructions = instructions.append(instructions)
-    # instructions = request.form.get('instructions')
-    return render_template('create.html', ingredients=ingredients)
-
-
-@app.route('/flavors/api/recipes', methods=['GET'])
-def api_all():
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD']
-        )
-
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-    cur.execute('SELECT * FROM recipes;')
-    all_recipes = cur.fetchall()
-
-    # Process each recipe to convert binary image data to base64 string
-    for recipe in all_recipes:
-        if recipe['image']:
-            recipe['image'] = base64.b64encode(recipe['image']).decode('utf-8')
-
-    return jsonify({'recipes': all_recipes})
-
-# Error handling
-@app.errorhandler(404)
-def page_not_found(e):
-    return "<h1>404!</h1><p>Resource not found.</p>", 404
-
-
-# GET Requests
-@app.route('/flavors/api/recipes', methods=['GET'])
-def api_filter():
-    query_params = request.args
-
-    rep_id = query_params.get('rep_id')
-    title = query_params.get('title')
-    ingredients = query_params.get('ingredients')
-    servings = query_params.get('servings')
-    instructions = query_params.get('instructions')
-
-    query = "SELECT * FROM recipes WHERE"
-    to_filter = []
-
-    if rep_id:
-        query += 'rep_id=? AND'
-        to_filter.append(rep_id)
-    if title:
-        query += 'title=? AND'
-        to_filter.append(title)
-    if ingredients:
-        query += 'ingredients=? AND'
-        to_filter.append(ingredients)
-    if servings:
-        query += 'servings=? AND'
-        to_filter.append(servings)
-    if instructions:
-        query += 'instructions=? AND'
-        to_filter.append(instructions)
-    if not (rep_id or title or ingredients or servings or instructions):
-        return page_not_found(404)
-
-    query = query[:-4] + ';'
-
-    # conn = sqlite3.connect('flavor_api_database.db')
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    # conn.row_factory = dict_factory
-    # cur = conn.cursor()
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-
-    cur.execute(query, to_filter)
-    results = cur.fetchall()
-    return jsonify(results)
-
-
-# Inserted user recipe(s)
-def insert_recipe(rep_id, title, ingredients, servings, instructions):
-    # conn = sqlite3.connect('flavor_api_database.db')
-    conn = get_db_connection()
-    cur = conn.cursor()
-    # cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    statement = "INSERT INTO recipes(rep_id, title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s, %s)"
-    cur.execute(statement, [rep_id, title, ingredients, servings, instructions])
-    conn.commit()
-    return True
-
-
-# Posted user recipe(s)
-@app.route('/flavors/api/recipes', methods=['GET', 'POST'])
-def api_post():
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    recipes = request.get_json()
-
-    # rep_id = request.json['rep_id']
-
-    title = request.json['title']
-    ingredients = request.json.get('ingredients', "")
-    servings = request.json.get('servings', "")
-    instructions = request.json.get('instructions', "")
-    # conn = sqlite3.connect('flavor_api_database.db')
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-    # conn.execute('INSERT INTO recipes(id, title, ingredients, servings, instructions) VALUES(?, ?, ?, ?, ?)', (id, title, ingredients, servings, instructions))
-    cur.execute('INSERT INTO recipes(title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s);',
-                (title, ingredients, servings, instructions))
-    conn.commit()
-    conn.close()
-    return jsonify({'recipe': recipes}), 201
-
-
-# Filter through recipes database
-# def get_recipe_by_id(rep_id):
-# conn = sqlite3.connect('flavor_api_database.db')
-#    conn = psycopg2.connect(
-#        host="localhost",
-#        database="flavors_api",
-#        user=os.environ['DB_USERNAME'],
-#        password=os.environ['DB_PASSWORD'])
-#    cursor = conn.cursor()
-#    statement = "SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?"
-#    cursor.execute(statement, [rep_id])
-#    return cursor.fetchone()
-
-# Access specific recipe by id
-@app.route('/flavors/api/recipes/<rep_name>', methods=['GET'])
-def get_recipes(rep_name):
-    # Old code
-    # ========
-    # conn = psycopg2.connect(
-    # host="localhost",
-    # database="flavors_api",
-    # user=os.environ['DB_USERNAME'],
-    # password=os.environ['DB_PASSWORD'])
-    # cur = conn.cursor()
-    # cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)
-    # statement = "SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?"
-    # cur.execute("SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = %s", [rep_id])
-    # recipe = cur.fetchone()
-    # recipe = get_recipe_by_id(rep_id)
-    # return jsonify({'recipe': recipe}) #can change array position from 0 - 4
-    # original return jsonify({'recipe': recipe})
-
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    # cur = conn.cursor()
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-    # statement = "SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?"
-    # cur.execute("SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE title = %s", [rep_name])
-    cur.execute("SELECT * FROM recipes;")
-    recipes = cur.fetchall()
-
-    # .casefold ignores case strings (Whether uppercase or lower)
-    recipe = [recipe for recipe in recipes if
-              rep_name.casefold() in recipe['title'].casefold() or rep_name.casefold() in recipe[
-                  'ingredients'].casefold()]
-    # for recipe in recipes:
-    #    if rep_name in recipes:
-    #        break
-
-    return jsonify({'recipe': recipe})  # can change array position from 0 - 4
-    # original return jsonify({'recipe': recipe})
-
-
-# Connect to database
-def get_db_connection():
-    # conn = sqlite3.connect('flavor_api_database.db')
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-    # conn.row_factory = sqlite3.Row
-    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
-
-    print("Connecting to database...")
-    return cur
-
-
-def get_recipe(rep_name):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-    post = conn.execute('SELECT *FROM recipes WHERE title = %s', {'recipe': rep_name}).fetchone()
-    conn.close()
-    if post is None:
-        abort(404)
-    return post
-
-
-# Modify recipe
-@app.route("/flavors/api/recipes/<int:rep_id>", methods=["PUT"])
-def update_recipe(rep_id):
-    recipes_edit = request.get_json()
-    # code to update recipe in database by id (rep_id) postgresql using psycopg2.connect
-    # conn = sqlite3.connect('flavor_api_database.db')
-
-    # rep_id = request.json['rep_id']
-    # title = request.json.get('title', '')
-    # ingredients = request.json.get('ingredients', "")
-    # servings = request.json.get('servings', "")
-    # instructions = request.json.get('instructions', "")
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        db = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        db = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cursor = db.cursor()
-    cursor.execute(
-        "UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s", (
-        recipes_edit['title'], recipes_edit['ingredients'], recipes_edit['servings'], recipes_edit['instructions'],
-        rep_id))
-
-    # statement =  "UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s"
-    # cursor.execute(statement, [title, ingredients, servings, instructions, rep_id])
-    db.commit()
-    return jsonify({'recipe': recipes_edit}), 201
-
-
-# Delete a recipe
-@app.route("/flavors/api/recipes/<int:rep_id>", methods=['DELETE'])
-def delete_recipe(rep_id):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        db = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        db = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cursor = db.cursor()
-    statement = "DELETE FROM recipes WHERE rep_id = %s"
-    cursor.execute(statement, [rep_id])
-    db.commit()
-    return ('Deleted'), 201
-
-
-@app.route('/image/<int:id>')
-def image(id):
-    try:
-        DATABASE_URL = os.environ['DATABASE_URL']
-        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
-    except:
-        conn = psycopg2.connect(
-            host="localhost",
-            database="flavors_api",
-            user=os.environ['DB_USERNAME'],
-            password=os.environ['DB_PASSWORD'])
-
-    cur = conn.cursor()
-    cur.execute('SELECT image FROM recipes WHERE rep_id = %s', (id,))
-    image_data = cur.fetchone()[0]
-    cur.close()
-    conn.close()
-    if not image_data:
-        abort(404)
-    return app.response_class(image_data, mimetype='image/jpeg')
-
-if __name__ == '__main__':
-    app.run(debug=True)
-
-
-
-# Posted user recipe(s)
-#@app.route('/flavors/api/recipes', methods=['GET', 'POST'])
-#def api_recipe_request():    
-
-#from flask_httpauth import HTTPBasicAuth
-
-#auth = HTTPBasicAuth()   
-
-#@auth.get_password
-#def get_password(username):
-#    if username == 'fred':
-#        return 'python'
-#    return None
\ No newline at end of file
Index: api/static/fonts/freefontsfamily.com.txt
===================================================================
diff --git a/api/static/fonts/freefontsfamily.com.txt b/api/static/fonts/freefontsfamily.com.txt
deleted file mode 100644
--- a/api/static/fonts/freefontsfamily.com.txt	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,1 +0,0 @@
-You can download this font here: https://freefontsfamily.com
\ No newline at end of file
Index: api/templates/index.html
===================================================================
diff --git a/api/templates/index.html b/api/templates/index.html
deleted file mode 100644
--- a/api/templates/index.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,48 +0,0 @@
-<!doctype html>
-{% extends 'base.html' %}
-<!--<link rel="stylesheet" href="{{ url_for('static', filename= 'css/style.css') }}">-->
-
-{% block content %}
-    <div class="container">
-    <h1 class="title">{% block title %} Flavors {% endblock %}</h1>
-
-    <div class="box">
-        <p><span class='discl'>Disclaimers:</span><br><br>
-            1. When posting a recipe on our website, this means you are the sole creator of that recipe.<br>
-            2. Once your recipe is inserted onto our database. Flavor will have full copyright over it or them. Meaning, Flavor could publish, distribute, sell, modify, delete, ...<br>   
-        </p>
-    </div>
-    <br>
-    <!--<h2>Recipe</h2>
-    
-    <form class="rep_post">
-        <label for="title">Title</label>
-        <input placeholder="Type"/>
-
-        <label for="ingredients">Ingredients</label>
-        <div class="ingredients">    
-            <input class="ingred_ipt" placeholder="Type"/>
-            <botton class="ingred_btn" type="submit">Add</botton>
-        </div>
-
-        <label for="servings">Servings</label>
-        <input placeholder="Type"/>
-
-        <label for="instructions">Instructions</label>
-        <div class="instructions">
-      
-            <textarea class="instruct_ipt textarea" placeholder="Type"></textarea>
-            <botton class="instruct_btn" type="submit">Add</botton>
-        </div>
-    </form> -->
-    <!--rep_id=recipe['rep_id']), 'recipe' comes from for loop '..recipe in recipes.. for loop below'-->
-
-    {%for recipe in recipes %}
-        <a href="{{ url_for('recipe_id', rep_id=recipe['rep_id']) }}">
-            <h2 class="">{{ recipe['title'] }}</h2>
-        </a>
-        <span class="badge badge-primary">{{ recipe['created'] }}</span>
-        <hr>
-    {% endfor %}
-    </div>
-{% endblock %}
\ No newline at end of file
Index: api/templates/old-base.html
===================================================================
diff --git a/api/templates/old-base.html b/api/templates/old-base.html
deleted file mode 100644
--- a/api/templates/old-base.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,43 +0,0 @@
-<!doctype html>
-<html lang="en">
-  <head>
-    <!-- Required meta tags -->
-    <meta charset="utf-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
-
-    <!-- Bootstrap CSS -->
-    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
-
-    <title>{% block title %} {% endblock %}</title>
-  </head>
-  <body>
-    <nav class="navbar navbar-expand-md navbar-light bg-light">
-      <a class="navbar-brand" href="{{ url_for('home')}}">Flavors Blog</a>
-        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
-            <span class="navbar-toggler-icon"></span>
-        </button>
-        <div class="collapse navbar-collapse" id="navbarNav">
-            <ul class="navbar-nav">
-            <li class="nav-item active">
-                <a class="nav-link" href="#">About</a>
-            </li>
-            <li class="nav-item">
-              <a class="nav-link" href="{{url_for('create')}}">New Recipe</a>
-            </li>
-            </ul>
-        </div>
-    </nav>
-    <div class="container">
-      {% for message in get_flashed_messages() %}
-        <div class="alert alert-danger">{{ message }}</div>
-      {% endfor %}
-      {% block content %} {% endblock %}
-    </div>
-
-    <!-- Optional JavaScript -->
-    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
-    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
-    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
-    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
-  </body>
-</html>
Index: api/templates/old-index.html
===================================================================
diff --git a/api/templates/old-index.html b/api/templates/old-index.html
deleted file mode 100644
--- a/api/templates/old-index.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,50 +0,0 @@
-<!doctype html>
-<link rel="stylesheet" href="{{ url_for('static', filename= 'css/style.css') }}">
-{% extends 'base.html' %}
-
-{% block content %}
-    <h1>{% block title %} Flavors API {% endblock %}</h1>
-    <img>
-    <p>This is a recipe api made with ❤️. Brought to you by Homely Flavor.</p>
-    <p>To access the recipe api's list, you need to go to the <a href="{{ url_for('api_all')}}">http://localhost:5000/flavors/api/recipes</a> on your local machine.</p>
-    <p>Or, <a href="{{ url_for('api_all')}}">https://flavors-api.onrender.com</a> from our website</p>
-    <p>Please help us with maintaining our database by posting your own recipes</p>
-    <br>
-    <div class="box">
-        <code><span class='discl'>Disclaimer:</span><br><br>
-            1. When posting a recipe on our website, this means you are the sole creator of that recipe.<br>
-            2. Once your recipe is inserted onto our database. Flavor will have full copyright over it or them. Meaning, Flavor could publish, distribute, sell, modify, delete, ...<br>   
-        </code>
-    </div>
-    <br>
-    <!--<h2>Recipe</h2>
-    
-    <form class="rep_post">
-        <label for="title">Title</label>
-        <input placeholder="Type"/>
-
-        <label for="ingredients">Ingredients</label>
-        <div class="ingredients">    
-            <input class="ingred_ipt" placeholder="Type"/>
-            <botton class="ingred_btn" type="submit">Add</botton>
-        </div>
-
-        <label for="servings">Servings</label>
-        <input placeholder="Type"/>
-
-        <label for="instructions">Instructions</label>
-        <div class="instructions">
-      
-            <textarea class="instruct_ipt textarea" placeholder="Type"></textarea>
-            <botton class="instruct_btn" type="submit">Add</botton>
-        </div>
-    </form> -->
-    <!--rep_id=recipe['rep_id']), 'recipe' comes from for loop '..recipe in recipes.. for loop below'-->
-    {%for recipe in recipes %}
-        <a href="{{ url_for('recipe_id', rep_id=recipe['rep_id']) }}">
-            <h2>{{ recipe['title'] }}</h2>
-        </a>
-        <span class="badge badge-primary">{{ recipe['created'] }}</span>
-        <hr>
-    {% endfor %}
-{% endblock %}
\ No newline at end of file
Index: api/templates/old-recipes.html
===================================================================
diff --git a/api/templates/old-recipes.html b/api/templates/old-recipes.html
deleted file mode 100644
--- a/api/templates/old-recipes.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,8 +0,0 @@
-{% extends 'base.html' %}
-
-
-{% block content %}
-    <h2>{% block title %} {{ recipes['title'] }} {% endblock %}</h2>
-    <span class="badge badge-primary">{{ recipes['ingredients'] }}</span>
-    <p>{{ recipes['instructions'] }}</p>
-{% endblock %}
Index: api/templates/recipes.html
===================================================================
diff --git a/api/templates/recipes.html b/api/templates/recipes.html
deleted file mode 100644
--- a/api/templates/recipes.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,9 +0,0 @@
-{% extends 'base.html' %}
-
-
-{% block content %}
-    <h2>{% block title %} {{ recipe['title'] }} {% endblock %}</h2>
-    <img src="{{ url_for('image', id=recipe['rep_id']) }}" alt="{{ recipe['title'] }}" class="img-fluid">
-    <span class="badge badge-primary">{{ recipe['ingredients'] }}</span>
-    <p>{{ recipe['instructions'] }}</p>
-{% endblock %}
Index: api/static/css/style.css
===================================================================
diff --git a/api/static/css/style.css b/api/static/css/style.css
deleted file mode 100644
--- a/api/static/css/style.css	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ /dev/null	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
@@ -1,167 +0,0 @@
-@font-face {
-    font-family: 'gotham-black';
-    src: url("/static/fonts/Gotham-Black.otf");
-}
-@font-face {
-    font-family: 'gotham-medium';
-    src: url("/static/fonts/GothamMedium.ttf");
-}
-
-@font-face {
-    font-family: 'onest-regular';
-    src: url("/static/fonts/Onest-Regular.ttf");
-}
-
-@font-face {
-    font-family: 'onest-black';
-    src: url("/static/fonts/Onest-Black.ttf");
-}
-
-@font-face {
-    font-family: 'lobster-regular';
-    src: url("/static/fonts/Lobster-Regular.ttf");
-}
-
-html, body {
-    max-width: 100%;
-    overflow-x: hidden;
-    font-family: 'onest-regular', sans-serif;
-}
-
-/*body {
-    background-image: url("/static/images/egg.png");
-}*/
-
-.title {
-    font-family: 'lobster-regular', sans-serif;
-}
-
-h1, h2 {
-    font-family: 'onest-black', sans-serif;
-    }
-p {
-    font-family: 'onest-regular', sans-serif;
-}
-input {
-    text-align: center;
-    /*font-family: monospace;*/
-    font-size: 15px;
-    border: 3px solid black;
-    width: 350px;
-    height: 30px;
-}
-textarea {
-    text-align: center;
-    /*font-family: monospace;*/
-    font-size: 15px;
-    border: 3px solid black;
-    width: 350px;
-    height: 30px;
-}
-
-.textarea {
-    resize: vertical;
-    
-}
-textarea:focus {
-    border: 3px solid #ff4141;
-    transition: .5s ease-in;
-}
-
-.discl {
-    font-family: 'onest-regular', 'sans-serif';
-    font-weight: bold;
-}
-code {
-    padding: 20px 20px 0 20px;
-}
-/*.box {
-    width: 100%;
-    height: 30%;
-    border: 3px solid black;      
-}*/
-
-.instruct_btn {
-    font-family: 'onest-regular', sans-serif;
-    height: 30px;
-    width: 60px;
-    color: black;
-    background-color: white;
-    border: 3px solid black;
-    text-align: center;
-    display: inline-block;
-    
-}
-
-.instruct_btn:hover {
-    color: white;
-    background-color: black;
-}
-
-.rep_post {
-    display: flex;
-    flex-direction: column;
-    justify-content: space-around;
-    flex: 3;
-    margin-bottom: 60px;
-}
-
-label {
-    font-family: 'onest-black', sans-serif;
-    font-size: 25px;
-    padding: 30px 0 5px 0;
-}
-
-.ingredients {
-    display: flex;
-    flex-direction: row;
-    justify-content: space-between;
-    flex: 3;
-    /*justify-content: left;*/
-}
-
-.ingred_ipt {
-    margin-right: 20px;
-}
-
-.instructions {
-    display: flex;
-    flex-direction: row;
-    justify-content: space-between;
-    flex: 3;
-    /*justify-content: left;*/
-}
-
-.instruct_ipt {
-    margin-right: 20px;
-}
-
-.ingred_btn {
-    font-family: 'gotham-black', sans-serif;
-    height: 30px;
-    width: 60px;
-    color: black;
-    background-color: white;
-    border: 3px solid black;
-    text-align: center;
-    display: inline-block;
-    overflow-y: hidden;
-    overflow: hidden;
-}
-
-.ingred_btn:hover {
-    color: white;
-    background-color: black;
-}
-
-.egg {
-    background-image: url("/static/images/egg.png");
-    background-repeat: no-repeat;
-    background-position: left top;
-
-}
-
-a {
-    text-decoration: none;
-    color: black;
-}
\ No newline at end of file
Index: tailwind.config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [],\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tailwind.config.js b/tailwind.config.js
--- a/tailwind.config.js	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ b/tailwind.config.js	(date 1719589663075)
@@ -1,6 +1,6 @@
 /** @type {import('tailwindcss').Config} */
 module.exports = {
-  content: [],
+  content: ["./templates/**/*.{html,js}"],
   theme: {
     extend: {},
   },
Index: flavorsapi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>''' #!flask/bin/python '''\r\n# from flask_cors import CORS\r\n'''from flask import Flask, request, jsonify, abort, make_response, url_for, render_template, flash, redirect, send_file\r\nfrom bs4 import BeautifulSoup\r\n\r\n#import sqlite3\r\nimport psycopg2\r\nimport psycopg2.extras\r\nimport os\r\nimport requests\r\nimport time\r\nimport io\r\n\r\n\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'your secret key' '''\r\n\r\n# CORS(app, resources={r\"/*\": {\"orgins\": \"*\"}})\r\n\r\n# in_memory_datastore = {\r\n#   \"COBOL\": {\"name\": \"COBOL\", \"publication_year\": 1960, \"contribution\": \"record data\"},\r\n#   \"ALGOL\": {\"name\": \"ALGOL\", \"publication_year\": 1958, \"contribution\": \"scoping and nested functions\"},\r\n#   \"APL\": {\"name\": \"APL\", \"publication_year\": 1962, \"contribution\": \"array processing\"},\r\n#   \"BASIC\": {\"name\": \"BASIC\", \"publication_year\": 1964, \"contribution\": \"runtime interpretation, office tooling\"},\r\n#   \"PL\": {\"name\": \"PL\", \"publication_year\": 1966, \"contribution\": \"constants, function overloading, pointers\"},\r\n#   \"SIMULA67\": {\"name\": \"SIMULA67\", \"publication_year\": 1967,\r\n#                \"contribution\": \"class/object split, subclassing, protected attributes\"},\r\n#   \"Pascal\": {\"name\": \"Pascal\", \"publication_year\": 1970,\r\n#              \"contribution\": \"modern unary, binary, and assignment operator syntax expectations\"},\r\n#   \"CLU\": {\"name\": \"CLU\", \"publication_year\": 1975,\r\n#           \"contribution\": \"iterators, abstract data types, generics, checked exceptions\"},\r\n# }\r\n\r\n# @app.route('/programming_languages', methods=['GET', 'POST'])\r\n# def programming_languages_route():\r\n#   if request.method == 'GET':\r\n#       return list_programming_languages()\r\n#   elif request.method == \"POST\":\r\n#       return create_programming_language(request.get_json(force=True))\r\n\r\n# def list_programming_languages():\r\n#   before_year = request.args.get('before_year') or '30000'\r\n#   after_year = request.args.get('after_year') or '0'\r\n#   qualifying_data = list(\r\n#       filter(\r\n#           lambda pl: int(before_year) > pl['publication_year'] > int(after_year),\r\n#           in_memory_datastore.values()\r\n#       )\r\n#   )\r\n\r\n#   return {\"programming_languages\": qualifying_data}\r\n\r\n# def create_programming_language(new_lang):\r\n#   language_name = new_lang['name']\r\n#   in_memory_datastore[language_name] = new_lang\r\n#   return new_lang\r\n\r\n# @app.route('/programming_languages/<programming_language_name>', methods=['GET', 'PUT', 'DELETE'])\r\n# def programming_language_route(programming_language_name):\r\n#   if request.method == 'GET':\r\n#       return get_programming_language(programming_language_name)\r\n#   elif request.method == \"PUT\":\r\n#       return update_programming_language(programming_language_name, request.get_json(force=True))\r\n#   elif request.method == \"DELETE\":\r\n#       return delete_programming_language(programming_language_name)\r\n\r\n# def get_programming_language(programming_language_name):\r\n#   return in_memory_datastore[programming_language_name]\r\n\r\n# def update_programming_language(lang_name, new_lang_attributes):\r\n#   lang_getting_update = in_memory_datastore[lang_name]\r\n#   lang_getting_update.update(new_lang_attributes)\r\n#   return lang_getting_update\r\n\r\n# def delete_programming_language(lang_name):\r\n#   deleting_lang = in_memory_datastore[lang_name]\r\n#   del in_memory_datastore[lang_name]\r\n#   return deleting_lang\r\n\r\n\r\n# def connect_to_db():\r\n#    conn = sqlite3.connect(\"flavor_api_database.db\")\r\n#    conn.row_factory = sqlite3.Row\r\n#    print(\"Connecting to database\")\r\n#    return conn\r\n\r\n# def create_db_table():\r\n#    try:\r\n#        conn = connect_to_db()\r\n#        conn.execute('''\r\n#            CREATE TABLE recipes (\r\n#                id INT PRIMARY KEY NOT NULL,\r\n#                title VARCHAR(155) NOT NULL,\r\n#                ingredients VARCHAR(155),\r\n#                servings CHAR(20), \r\n#                instructions VARCHAR(255)\r\n#            );\r\n#        ''')\r\n#        conn.commit()\r\n#        print(\"Recipe table created successfully\")\r\n#    except:\r\n#        print(\"Recipe table creation failed\")\r\n#    finally:\r\n#        conn.close()\r\n\r\n# def insert_recipe(recipe):\r\n#    inserted_recipes = {}\r\n#    try:\r\n#        conn = connect_to_db()\r\n#        cur = conn.cursor()\r\n#        cur.execute(\"INSERT INTO recipes (id, title, ingredients, servings, instructions) VALUES(?, ?, ?, ?, ?)\", (recipe['id'], recipe['title'], recipe['ingredients'], recipe['servings'], recipe['instructions'], recipe['instructions']))\r\n#        conn.commit()\r\n#        inserted_recipes = get_recipe_by_id(cur.lastrowid)\r\n#        print ('inserted')\r\n#    except:\r\n#        conn.rollback()\r\n#    finally:\r\n#        conn.close()\r\n#    return inserted_recipes\r\n\r\n# def get_recipe():\r\n#    recipes = []\r\n#    try:\r\n#        conn = connect_to_db()\r\n#        conn.row_factory = sqlite3.Row\r\n#        cur = conn.cursor()\r\n#        cur.execute(\"SELECT * FROM recipes\")\r\n#        rows = cur.fetchall()\r\n\r\n#        for i in rows:\r\n#            recipe = {}\r\n#            recipe[\"id\"] = i[\"id\"]\r\n#            recipe[\"title\"] = i[\"title\"]\r\n#            recipe[\"ingredients\"] = i[\"ingredients\"]\r\n#            recipe[\"servings\"] = i[\"servings\"]\r\n#            recipe[\"instructions\"] = i[\"nstructions\"]\r\n#            recipes.append(recipe)\r\n#    except:\r\n#        recipes = []\r\n\r\n#    return recipes\r\n\r\n# def get_recipe_by_id(title):\r\n#    recipe = {}\r\n#    try:\r\n#        conn = connect_to_db()\r\n#        conn.row_factory = sqlite3.Row\r\n#        cur = conn.cursor()\r\n#        cur.execute(\"SELECT * FROM recipes WHERE title = ?\", (title,))\r\n#        row = cur.fetchone()\r\n\r\n#        recipe[\"id\"] = row[\"id\"]\r\n#        recipe[\"title\"] = row[\"title\"]\r\n#        recipe[\"ingredients\"] = row[\"ingredients\"]\r\n#        recipe[\"servings\"] = row[\"servings\"]\r\n#        recipe[\"instructions\"] = row[\"instructions\"]\r\n#    except:\r\n#        recipe = {}\r\n\r\n#    return recipe\r\n\r\n# recipes = []\r\n\r\n# recip1 =    {\r\n#      \"title\":\"Stracciatella (Italian Wedding Soup)\",\r\n#      \"ingredients\":\"3 1/2 c Chicken broth; homemade|1 lb Fresh spinach; wash/trim/chop|1 Egg|1 c Grated parmesan cheese; --or--|1 c Romano cheese; freshly grated|Salt and pepper; to taste\",\r\n#      \"servings\":\"4 servings\",\r\n#      \"id\": 1,\r\n#      \"instructions\":\"Bring 1 cup of the broth to a boil. Add spinach and cook until softened but still bright green. Remove spinach with a slotted spoon and set aside. Add remaining broth to pot. Bring to a boil. Meanwhile, beat egg lightly with a fork. Beat in 1/4 cup of cheese. When broth boils pour in egg mixture, stirring constantly for a few seconds until it cooks into 'rags.'' Add reserved spinach, salt and pepper. Serve immediately, passing remaining cheese. NOTES: Someone asked for this recipe a while back. I believe this soup, known as 'Stracciatella' is synonymous with Italian Wedding Soup, however, I seem to remember from I-don't-know-where that Italian Wedding Soup is the same as this but with the addition of tiny meatballs.\"\r\n#    }\r\n# recip2 =      {\r\n#      \"title\": \"Need to find a good Python tutorial on the web\",\r\n#      \"ingredients\": \"Stuff\",\r\n#      \"servings\": \"4 servings\",\r\n#      \"id\": 2,\r\n#      \"instructions\": \"Learn Python\"\r\n#    }\r\n\r\n# recipes.append(recip1)\r\n# recipes.append(recip2)\r\n\r\n# @app.route('/flavors/api/recipes', methods=['GET'])\r\n# def api_recipe_list():\r\n#  return jsonify(get_recipe())\r\n\r\n# @app.route('/flavors/api/recipes/<title>', methods=['GET'])\r\n# def api_recipes_list(title):\r\n#  return jsonify(get_recipe_by_id(title))\r\n\r\n# @app.route('/flavors/api/recipes/add', methods=['POST'])\r\n# def api_add_recipe_list():\r\n#    recipe = request.get_json()\r\n#    return jsonify(insert_recipe(recipe))\r\n'''try: \r\n    #url = 'https://www.recipe-free.com/recipes/easy-swedish-meatballs---jamie-oliver-recipe/129381'\r\n    #url = 'https://www.recipe-free.com/recipes/best-african-vegetarian-stew/129364'\r\n    #url = 'https://www.recipe-free.com/recipes/real-coconut-chicken-tenders-recipe-joel-robuchon-recipe/129450'\r\n    #result = requests.get(url).text\r\n\r\n    #url = 'https://www.recipe-free.com/recipes/easy-swedish-meatballs---jamie-oliver-recipe/129381'\r\n\r\n\r\n    #result = requests.get(url).text\r\n\r\n    #doc = BeautifulSoup(result, 'html.parser')\r\n\r\n\r\n    #rtitle = doc.find('h1', {'class': 'red'}).text.strip()\r\n    #ringredients = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[0].text.strip()\r\n    #rservings = doc.find('div', {'class': 'times'}).findAll('div', {'class': 'times_tab'})[1].findAll('div', {'class': 'f12 f12'})[1].text.strip()\r\n    #rinstructions = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[1].text.strip()\r\n    #print(f'title: {rtitle}')\r\n    #print(f'ingredients: {ringredients}')\r\n    #print(f'servings: {rservings}')\r\n    #print(f'instructions: {rinstructions}')\r\n\r\n    page = 1\r\n    url_no = 1\r\n    titles = []\r\n    links = []\r\n    links_dict = {}\r\n\r\n    while page != 7:\r\n        url = f\"https://www.recipe-free.com/categories/meat-recipes/{page}\"\r\n        # print(url)\r\n        response = requests.get(url)\r\n        html = response.content\r\n        soup = BeautifulSoup(html, \"lxml\")\r\n        for a in soup.find('div', {'class': 'category_content centerindent for-this'}).findAll('a', {'class': 'day'}):\r\n            titles.append(a.get_text(strip=True))\r\n            links.append(a.get('href'))\r\n            # print(titles)\r\n        page = page + 1\r\n    for title in titles[:80]:\r\n        print(title)\r\n    for i, link in enumerate(links[:120], url_no):\r\n        # print(f'url {url_no}: {link}')\r\n        name = f'url {url_no}'\r\n        links_dict = {name: link}\r\n        # links_dict = {f'url {url_no}': link}\r\n        url_no += 1\r\n        # for dict in links_dict:\r\n        # print(links_dict)\r\n        print(links_dict[name])\r\n        # code to get info from each link stored in links_dict\r\n        url_grapper = links_dict[name]\r\n        result = requests.get(url_grapper).text\r\n        doc = BeautifulSoup(result, 'html.parser')\r\n        # Extract image URL\r\n        image_tag = doc.find('div', {'class': 'col-md-4 col-sm-4'}).findAll('div')[0].findAll('img')[0]\r\n        image_url = image_tag['src']\r\n        image_url_fixed = image_url.replace('../..', '')\r\n        base_url = 'https://www.recipe-free.com'\r\n        rimage_url = base_url + image_url_fixed\r\n        try:\r\n            rimage = requests.get(rimage_url).content  # Fetch image data\r\n        except requests.exceptions.RequestException as e:\r\n            print(f\"Error! Failed to fetch image from {rimage_url}: {e}\")\r\n            rimage = None\r\n        # Extract other details\r\n        rtitle = doc.find('h1', {'class': 'red'}).text.strip()\r\n        ringredients = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[0].text.strip()\r\n        rservings = doc.find('div', {'class': 'times'}).findAll('div', {'class': 'times_tab'})[1].findAll('div', {\r\n            'class': 'f12 f12'})[1].text.strip()\r\n        rinstructions = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[1].text.strip()\r\n\r\n        #print(f'title: {rtitle}')\r\n        #print(f'ingredients: {ringredients}')\r\n        #print(f'servings: {rservings}')\r\n        #print(f'instructions: {rinstructions}')\r\n        print(f'images: {rimage_url}')\r\n\r\n\r\n        try:\r\n            DATABASE_URL = os.environ['DATABASE_URL']\r\n            conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n        except:\r\n            conn = psycopg2.connect(\r\n                host=\"localhost\",\r\n                database=\"flavors_api\",\r\n                user=os.environ['DB_USERNAME'],\r\n                password=os.environ['DB_PASSWORD'])\r\n\r\n        try:\r\n            cur = conn.cursor()'''\r\n# query = '''INSERT INTO recipes(title, ingredients, servings, instructions, image) VALUES(%s, %s, %s, %s, %s)'''\r\n# record_to_insert = (rtitle, ringredients, rservings, rinstructions, psycopg2.Binary(rimage) if rimage else None)\r\n# cur.execute(query, record_to_insert)\r\n# conn.commit()\r\n# conn.close()\r\n# except Exception as e:\r\n# print(f\"Failed to insert data: {e}\")\r\n\r\n# except Exception as e:\r\n# print(f\"Failed to establish a new connection: {e}\")\r\n\r\n\r\n# def in_data():\r\n\r\n\r\n# conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n\r\n# Row and column in database tables\r\n\r\n\r\n'''def dict_factory(cursor, row):\r\n    d = {}\r\n    for idx, col in enumerate(cursor.description):\r\n        d[col[0]] = row[idx]\r\n    return d\r\n\r\n# Home screen\r\n@app.route('/', methods=['GET'])\r\ndef home():\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    #all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()\r\n    cur.execute('SELECT * FROM recipes;')\r\n    recipes = cur.fetchall()\r\n\r\n    return render_template('index.html', recipes=recipes)\r\n\r\ndef get_recipe_id(rep_id):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    cur.execute('SELECT * FROM recipes WHERE rep_id = %s', (rep_id,))\r\n    recipes = cur.fetchone()\r\n\r\n    conn.close()\r\n    if recipes is None:\r\n        abort(404)\r\n    return recipes\r\n\r\n\r\n@app.route('/<int:rep_id>')\r\ndef recipe_id(rep_id):\r\n    recipes = get_recipe_id(rep_id)\r\n    return render_template('recipes.html', recipes=recipes)\r\n\r\n\r\n@app.route('/create', methods=('GET', 'POST'))\r\ndef create():\r\n    if request.method == 'POST':\r\n        title = request.form['title']\r\n        ingredients = request.form['ingredients']\r\n        servings = request.form['servings']\r\n        instructions = request.form['instructions']\r\n\r\n\r\n        if not title:\r\n            flash('Title is required!')\r\n        if not ingredients:\r\n            flash('Ingredients is required!')\r\n        if not servings:\r\n            flash('Servings is required!')\r\n        if not instructions:\r\n            flash('Instructions is required!')\r\n\r\n        else:\r\n            try:\r\n                DATABASE_URL = os.environ['DATABASE_URL']\r\n                conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n            except:\r\n                conn = psycopg2.connect(\r\n                    host=\"localhost\", \r\n                    database=\"flavors_api\",\r\n                    user=os.environ['DB_USERNAME'],\r\n                    password=os.environ['DB_PASSWORD'])\r\n            cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)      \r\n            cur.execute('INSERT INTO recipes (title, ingredients, servings, instructions) VALUES (%s, %s, %s, %s)',\r\n                         (title, ingredients, servings, instructions))\r\n            conn.commit()\r\n            conn.close()\r\n            return redirect(url_for('home'))\r\n\r\n    # Fix code below, ingredients add button triggers instructions button\r\n    ingredients = []\r\n    #instructions = []\r\n\r\n    ingredients = ingredients.append(ingredients) \r\n    ingredients = request.form.get('ingredients') \r\n\r\n\r\n    #instructions = instructions.append(instructions) \r\n    #instructions = request.form.get('instructions') \r\n    return render_template('create.html', ingredients=ingredients)\r\n\r\n@app.route('/flavors/api/recipes', methods=['GET'])\r\ndef api_all():\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n        #host=\"localhost\", \r\n        #database=\"flavors_api\",\r\n        #DB_USERNAME=os.environ['DB_USERNAME'],\r\n        #DB_PASSWORD=os.environ['DB_PASSWORD']\r\n\r\n        #URL = os.environ.get('postgres://etryrrveyngcvx:7eb31e76ed3b8452749bada81b9058ee51cc902b7ea996b3a2b566ab841dbe5b@ec2-44-198-82-71.compute-1.amazonaws.com:5432/ddskfvmrts9ipg')\r\n        #DATABASE_URL=os.environ.get('postgres://etryrrveyngcvx:7eb31e76ed3b8452749bada81b9058ee51cc902b7ea996b3a2b566ab841dbe5b@ec2-44-198-82-71.compute-1.amazonaws.com:5432/ddskfvmrts9ipg -a flavorsapi')\r\n\r\n    #conn.row_factory = dict_factory\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    #all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()\r\n    cur.execute('SELECT * FROM recipes;')\r\n    all_recipes = cur.fetchall()\r\n    return jsonify({'recipes': all_recipes})\r\n    #return validate(instance={'recipes': cur}, schema=all_recipes)\r\n\r\n# Error handling\r\n@app.errorhandler(404)\r\ndef page_not_found(e):\r\n    return \"<h1>404!</h1><p>Resource not found.</p>\", 404\r\n\r\n# GET Requests\r\n@app.route('/flavors/api/recipes', methods=['GET'])\r\ndef api_filter():\r\n    query_params = request.args\r\n\r\n    rep_id = query_params.get('rep_id')\r\n    title = query_params.get('title')\r\n    ingredients = query_params.get('ingredients')\r\n    servings = query_params.get('servings')\r\n    instructions = query_params.get('instructions')\r\n\r\n    query = \"SELECT * FROM recipes WHERE\"\r\n    to_filter = []\r\n\r\n    if rep_id:\r\n        query += 'rep_id=? AND' \r\n        to_filter.append(rep_id)\r\n    if title:\r\n        query += 'title=? AND'\r\n        to_filter.append(title)\r\n    if ingredients:\r\n        query += 'ingredients=? AND'\r\n        to_filter.append(ingredients)\r\n    if servings:\r\n        query += 'servings=? AND'\r\n        to_filter.append(servings)\r\n    if instructions:\r\n        query += 'instructions=? AND'\r\n        to_filter.append(instructions)\r\n    if not (rep_id or title or ingredients or servings or instructions):\r\n        return page_not_found(404)\r\n\r\n    query = query[:-4] + ';'\r\n\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    #conn.row_factory = dict_factory\r\n    #cur = conn.cursor()\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n\r\n    cur.execute(query, to_filter)\r\n    results = cur.fetchall()\r\n    return jsonify(results)\r\n\r\n# Inserted user recipe(s)\r\ndef insert_recipe(rep_id, title, ingredients, servings, instructions):\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    #cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    statement = \"INSERT INTO recipes(rep_id, title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s, %s)\"\r\n    cur.execute(statement, [rep_id, title, ingredients, servings, instructions])\r\n    conn.commit()\r\n    return True\r\n\r\n# Posted user recipe(s)\r\n@app.route('/flavors/api/recipes', methods=['GET', 'POST'])\r\ndef api_post():\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    recipes = request.get_json()\r\n\r\n    #rep_id = request.json['rep_id']\r\n\r\n    title = request.json['title']\r\n    ingredients = request.json.get('ingredients', \"\")\r\n    servings = request.json.get('servings', \"\")\r\n    instructions = request.json.get('instructions', \"\")\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    #conn.execute('INSERT INTO recipes(id, title, ingredients, servings, instructions) VALUES(?, ?, ?, ?, ?)', (id, title, ingredients, servings, instructions))\r\n    cur.execute('INSERT INTO recipes(title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s);', (title, ingredients, servings, instructions))\r\n    conn.commit()\r\n    conn.close()\r\n    return jsonify({'recipe': recipes}), 201\r\n\r\n# Filter through recipes database\r\n#def get_recipe_by_id(rep_id):\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n#    conn = psycopg2.connect(\r\n#        host=\"localhost\", \r\n#        database=\"flavors_api\",\r\n#        user=os.environ['DB_USERNAME'],\r\n#        password=os.environ['DB_PASSWORD'])\r\n#    cursor = conn.cursor()\r\n#    statement = \"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?\"\r\n#    cursor.execute(statement, [rep_id])\r\n#    return cursor.fetchone()\r\n\r\n# Access specific recipe by id\r\n@app.route('/flavors/api/recipes/<rep_name>', methods=['GET'])\r\ndef get_recipes(rep_name):\r\n    #Old code\r\n    #========\r\n      #conn = psycopg2.connect(\r\n        #host=\"localhost\", \r\n        #database=\"flavors_api\",\r\n        #user=os.environ['DB_USERNAME'],\r\n        #password=os.environ['DB_PASSWORD'])\r\n    #cur = conn.cursor()\r\n    #cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    #statement = \"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?\"\r\n    #cur.execute(\"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = %s\", [rep_id])\r\n    #recipe = cur.fetchone()\r\n    #recipe = get_recipe_by_id(rep_id)\r\n    #return jsonify({'recipe': recipe}) #can change array position from 0 - 4 \r\n    #original return jsonify({'recipe': recipe})\r\n\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n\r\n\r\n    #cur = conn.cursor()\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    #statement = \"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?\"\r\n    #cur.execute(\"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE title = %s\", [rep_name])\r\n    cur.execute(\"SELECT * FROM recipes;\")\r\n    recipes = cur.fetchall()\r\n\r\n    # .casefold ignores case strings (Whether uppercase or lower)\r\n    recipe = [recipe for recipe in recipes if rep_name.casefold() in recipe['title'].casefold() or rep_name.casefold() in recipe['ingredients'].casefold()]\r\n    #for recipe in recipes:\r\n    #    if rep_name in recipes:\r\n    #        break\r\n\r\n\r\n    return jsonify({'recipe': recipe}) #can change array position from 0 - 4          \r\n    #original return jsonify({'recipe': recipe})\r\n\r\n# Connect to database\r\ndef get_db_connection():\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n    #conn.row_factory = sqlite3.Row\r\n    cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n\r\n    print(\"Connecting to database...\")\r\n    return cur\r\n\r\ndef get_recipe(rep_name):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n    post = conn.execute('SELECT *FROM recipes WHERE title = %s', {'recipe': rep_name}).fetchone()\r\n    conn.close()\r\n    if post is None:\r\n        abort(404)\r\n    return post\r\n\r\n# Modify recipe\r\n@app.route(\"/flavors/api/recipes/<int:rep_id>\", methods=[\"PUT\"])\r\ndef update_recipe(rep_id):\r\n    recipes_edit = request.get_json()\r\n    #code to update recipe in database by id (rep_id) postgresql using psycopg2.connect\r\n    #conn = sqlite3.connect('flavor_api_database.db')\r\n\r\n    #rep_id = request.json['rep_id']\r\n    #title = request.json.get('title', '')\r\n    #ingredients = request.json.get('ingredients', \"\")\r\n    #servings = request.json.get('servings', \"\")\r\n    #instructions = request.json.get('instructions', \"\")\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        db = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        db = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cursor = db.cursor()\r\n    cursor.execute(\"UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s\", (recipes_edit['title'], recipes_edit['ingredients'], recipes_edit['servings'], recipes_edit['instructions'], rep_id))\r\n\r\n    #statement =  \"UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s\"\r\n    #cursor.execute(statement, [title, ingredients, servings, instructions, rep_id])\r\n    db.commit()\r\n    return jsonify({'recipe': recipes_edit}), 201\r\n\r\n# Delete a recipe\r\n@app.route(\"/flavors/api/recipes/<int:rep_id>\", methods=['DELETE'])\r\ndef delete_recipe(rep_id):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        db = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        db = psycopg2.connect(\r\n            host=\"localhost\", \r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cursor = db.cursor()\r\n    statement = \"DELETE FROM recipes WHERE rep_id = %s\"\r\n    cursor.execute(statement, [rep_id])\r\n    db.commit()\r\n    return ('Deleted'), 201\r\n\r\n\r\n@app.route('/recipe_image/<int:id>')\r\ndef recipe_image(id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute(\"SELECT image FROM recipes WHERE id = %s\", (id,))\r\n    image_data = cur.fetchone()\r\n    conn.close()\r\n\r\n    if image_data is None or image_data[0] is None:\r\n        abort(404)\r\n\r\n    return send_file(\r\n        io.BytesIO(image_data[0]),\r\n        mimetype='image/jpeg',  # or the appropriate mime type\r\n        as_attachment=False,\r\n        download_name='recipe_image.jpg'  # or a meaningful name\r\n    )'''\r\n\r\nfrom flask import Flask, request, jsonify, render_template, flash, redirect, url_for, abort\r\nfrom bs4 import BeautifulSoup\r\nimport psycopg2\r\nimport psycopg2.extras\r\nimport requests\r\nimport os\r\nimport base64\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'your_secret_key'\r\n\r\n'''def get_db_connection():'''\r\n'''try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n    return conn'''\r\n\r\n'''def fetch_recipe_data(url):'''\r\n\r\ntry:\r\n    page = 1\r\n    url_no = 1\r\n    titles = []\r\n    links = []\r\n    links_dict = {}\r\n\r\n    while page != 7:\r\n        url = f\"https://www.recipe-free.com/categories/meat-recipes/{page}\"\r\n        # print(url)\r\n        response = requests.get(url)\r\n        html = response.content\r\n        soup = BeautifulSoup(html, \"lxml\")\r\n        for a in soup.find('div', {'class': 'category_content centerindent for-this'}).findAll('a', {'class': 'day'}):\r\n            titles.append(a.get_text(strip=True))\r\n            links.append(a.get('href'))\r\n            # print(titles)\r\n        page = page + 1\r\n    for title in titles[:80]:\r\n        print(title)\r\n    for i, link in enumerate(links[:120], url_no):\r\n        # print(f'url {url_no}: {link}')\r\n        name = f'url {url_no}'\r\n        links_dict = {name: link}\r\n        # links_dict = {f'url {url_no}': link}\r\n        url_no += 1\r\n        # for dict in links_dict:\r\n        # print(links_dict)\r\n        print(links_dict[name])\r\n        # code to get info from each link stored in links_dict\r\n        url_grapper = links_dict[name]\r\n        result = requests.get(url_grapper).text\r\n        doc = BeautifulSoup(result, 'html.parser')\r\n        # Extract image URL\r\n        image_tag = doc.find('div', {'class': 'col-md-4 col-sm-4'}).findAll('div')[0].findAll('img')[0]\r\n        image_url = image_tag['src']\r\n        image_url_fixed = image_url.replace('../..', '')\r\n        base_url = 'https://www.recipe-free.com'\r\n        rimage_url = base_url + image_url_fixed\r\n        try:\r\n            rimage = requests.get(rimage_url).content  # Fetch image data\r\n        except requests.exceptions.RequestException as e:\r\n            print(f\"Error! Failed to fetch image from {rimage_url}: {e}\")\r\n            rimage = None\r\n        # Extract other details\r\n        rtitle = doc.find('h1', {'class': 'red'}).text.strip()\r\n        ringredients = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[0].text.strip()\r\n        rservings = doc.find('div', {'class': 'times'}).findAll('div', {'class': 'times_tab'})[1].findAll('div', {\r\n            'class': 'f12 f12'})[1].text.strip()\r\n        rinstructions = doc.find('div', {'class': 'col-md-12 for-padding-col'}).find_all('p')[1].text.strip()\r\n\r\n        # print(f'title: {rtitle}')\r\n        # print(f'ingredients: {ringredients}')\r\n        # print(f'servings: {rservings}')\r\n        # print(f'instructions: {rinstructions}')\r\n        print(f'images: {rimage_url}')\r\n\r\n        try:\r\n            DATABASE_URL = os.environ['DATABASE_URL']\r\n            conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n        except:\r\n            conn = psycopg2.connect(\r\n                host=\"localhost\",\r\n                database=\"flavors_api\",\r\n                user=os.environ['DB_USERNAME'],\r\n                password=os.environ['DB_PASSWORD'])\r\n\r\n        try:\r\n            cur = conn.cursor()\r\n            query = '''INSERT INTO recipes(title, ingredients, servings, instructions, image) VALUES(%s, %s, %s, %s, %s)'''\r\n            record_to_insert = (\r\n            rtitle, ringredients, rservings, rinstructions, psycopg2.Binary(rimage) if rimage else None)\r\n            cur.execute(query, record_to_insert)\r\n            conn.commit()\r\n            conn.close()\r\n        except Exception as e:\r\n            print(f\"Failed to insert data: {e}\")\r\n\r\nexcept Exception as e:\r\n    print(f\"Failed to establish a new connection: {e}\")\r\n\r\n\r\n# Home screen\r\n@app.route('/', methods=['GET'])\r\ndef home():\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    # all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()\r\n    cur.execute('SELECT * FROM recipes;')\r\n    recipes = cur.fetchall()\r\n\r\n    return render_template('index.html', recipes=recipes)\r\n\r\n\r\n# Home screen\r\n@app.route('/recipes', methods=['GET'])\r\ndef all_recipes():\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    # all_recipes = cur.execute('SELECT * FROM recipes;').fetchall()\r\n    cur.execute('SELECT * FROM recipes;')\r\n    recipes = cur.fetchall()\r\n\r\n    return render_template('all_recipe.html', recipes=recipes)\r\n\r\n\r\ndef get_recipe_id(rep_id):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    cur.execute('SELECT * FROM recipes WHERE rep_id = %s', (rep_id,))\r\n    recipes = cur.fetchone()\r\n\r\n    conn.close()\r\n    if recipes is None:\r\n        abort(404)\r\n    return recipes\r\n\r\n\r\n@app.route('/<int:rep_id>')\r\ndef recipe_id(rep_id):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    cur.execute('SELECT * FROM recipes WHERE rep_id = %s', (rep_id,))\r\n    recipe = cur.fetchone()\r\n    cur.close()\r\n    conn.close()\r\n    if recipe is None:\r\n        abort(404)\r\n    return render_template('recipes.html', recipe=recipe)\r\n\r\n\r\n@app.route('/create', methods=('GET', 'POST'))\r\ndef create():\r\n    if request.method == 'POST':\r\n        title = request.form['title']\r\n        ingredients = request.form['ingredients']\r\n        servings = request.form['servings']\r\n        instructions = request.form['instructions']\r\n\r\n        if not title:\r\n            flash('Title is required!')\r\n        if not ingredients:\r\n            flash('Ingredients is required!')\r\n        if not servings:\r\n            flash('Servings is required!')\r\n        if not instructions:\r\n            flash('Instructions is required!')\r\n\r\n        else:\r\n            try:\r\n                DATABASE_URL = os.environ['DATABASE_URL']\r\n                conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n            except:\r\n                conn = psycopg2.connect(\r\n                    host=\"localhost\",\r\n                    database=\"flavors_api\",\r\n                    user=os.environ['DB_USERNAME'],\r\n                    password=os.environ['DB_PASSWORD'])\r\n            cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n            cur.execute('INSERT INTO recipes (title, ingredients, servings, instructions) VALUES (%s, %s, %s, %s)',\r\n                        (title, ingredients, servings, instructions))\r\n            conn.commit()\r\n            conn.close()\r\n            return redirect(url_for('home'))\r\n\r\n    # Fix code below, ingredients add button triggers instructions button\r\n    ingredients = []\r\n    # instructions = []\r\n\r\n    ingredients = ingredients.append(ingredients)\r\n    ingredients = request.form.get('ingredients')\r\n\r\n    # instructions = instructions.append(instructions)\r\n    # instructions = request.form.get('instructions')\r\n    return render_template('create.html', ingredients=ingredients)\r\n\r\n\r\n@app.route('/flavors/api/recipes', methods=['GET'])\r\ndef api_all():\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD']\r\n        )\r\n\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    cur.execute('SELECT * FROM recipes;')\r\n    all_recipes = cur.fetchall()\r\n\r\n    # Process each recipe to convert binary image data to base64 string\r\n    for recipe in all_recipes:\r\n        if recipe['image']:\r\n            recipe['image'] = base64.b64encode(recipe['image']).decode('utf-8')\r\n\r\n    return jsonify({'recipes': all_recipes})\r\n\r\n\r\n# Error handling\r\n@app.errorhandler(404)\r\ndef page_not_found(e):\r\n    return \"<h1>404!</h1><p>Resource not found.</p>\", 404\r\n\r\n\r\n# GET Requests\r\n@app.route('/flavors/api/recipes', methods=['GET'])\r\ndef api_filter():\r\n    query_params = request.args\r\n\r\n    rep_id = query_params.get('rep_id')\r\n    title = query_params.get('title')\r\n    ingredients = query_params.get('ingredients')\r\n    servings = query_params.get('servings')\r\n    instructions = query_params.get('instructions')\r\n\r\n    query = \"SELECT * FROM recipes WHERE\"\r\n    to_filter = []\r\n\r\n    if rep_id:\r\n        query += 'rep_id=? AND'\r\n        to_filter.append(rep_id)\r\n    if title:\r\n        query += 'title=? AND'\r\n        to_filter.append(title)\r\n    if ingredients:\r\n        query += 'ingredients=? AND'\r\n        to_filter.append(ingredients)\r\n    if servings:\r\n        query += 'servings=? AND'\r\n        to_filter.append(servings)\r\n    if instructions:\r\n        query += 'instructions=? AND'\r\n        to_filter.append(instructions)\r\n    if not (rep_id or title or ingredients or servings or instructions):\r\n        return page_not_found(404)\r\n\r\n    query = query[:-4] + ';'\r\n\r\n    # conn = sqlite3.connect('flavor_api_database.db')\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    # conn.row_factory = dict_factory\r\n    # cur = conn.cursor()\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n\r\n    cur.execute(query, to_filter)\r\n    results = cur.fetchall()\r\n    return jsonify(results)\r\n\r\n\r\n# Inserted user recipe(s)\r\ndef insert_recipe(rep_id, title, ingredients, servings, instructions):\r\n    # conn = sqlite3.connect('flavor_api_database.db')\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    # cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    statement = \"INSERT INTO recipes(rep_id, title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s, %s)\"\r\n    cur.execute(statement, [rep_id, title, ingredients, servings, instructions])\r\n    conn.commit()\r\n    return True\r\n\r\n\r\n# Posted user recipe(s)\r\n@app.route('/flavors/api/recipes', methods=['GET', 'POST'])\r\ndef api_post():\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    recipes = request.get_json()\r\n\r\n    # rep_id = request.json['rep_id']\r\n\r\n    title = request.json['title']\r\n    ingredients = request.json.get('ingredients', \"\")\r\n    servings = request.json.get('servings', \"\")\r\n    instructions = request.json.get('instructions', \"\")\r\n    # conn = sqlite3.connect('flavor_api_database.db')\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    # conn.execute('INSERT INTO recipes(id, title, ingredients, servings, instructions) VALUES(?, ?, ?, ?, ?)', (id, title, ingredients, servings, instructions))\r\n    cur.execute('INSERT INTO recipes(title, ingredients, servings, instructions) VALUES(%s, %s, %s, %s);',\r\n                (title, ingredients, servings, instructions))\r\n    conn.commit()\r\n    conn.close()\r\n    return jsonify({'recipe': recipes}), 201\r\n\r\n\r\n# Filter through recipes database\r\n# def get_recipe_by_id(rep_id):\r\n# conn = sqlite3.connect('flavor_api_database.db')\r\n#    conn = psycopg2.connect(\r\n#        host=\"localhost\",\r\n#        database=\"flavors_api\",\r\n#        user=os.environ['DB_USERNAME'],\r\n#        password=os.environ['DB_PASSWORD'])\r\n#    cursor = conn.cursor()\r\n#    statement = \"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?\"\r\n#    cursor.execute(statement, [rep_id])\r\n#    return cursor.fetchone()\r\n\r\n# Access specific recipe by id\r\n@app.route('/flavors/api/recipes/<rep_name>', methods=['GET'])\r\ndef get_recipes(rep_name):\r\n    # Old code\r\n    # ========\r\n    # conn = psycopg2.connect(\r\n    # host=\"localhost\",\r\n    # database=\"flavors_api\",\r\n    # user=os.environ['DB_USERNAME'],\r\n    # password=os.environ['DB_PASSWORD'])\r\n    # cur = conn.cursor()\r\n    # cur = conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor)\r\n    # statement = \"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?\"\r\n    # cur.execute(\"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = %s\", [rep_id])\r\n    # recipe = cur.fetchone()\r\n    # recipe = get_recipe_by_id(rep_id)\r\n    # return jsonify({'recipe': recipe}) #can change array position from 0 - 4\r\n    # original return jsonify({'recipe': recipe})\r\n\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    # cur = conn.cursor()\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n    # statement = \"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE rep_id = ?\"\r\n    # cur.execute(\"SELECT rep_id, title, ingredients, servings, instructions FROM recipes WHERE title = %s\", [rep_name])\r\n    cur.execute(\"SELECT * FROM recipes;\")\r\n    recipes = cur.fetchall()\r\n\r\n    # .casefold ignores case strings (Whether uppercase or lower)\r\n    recipe = [recipe for recipe in recipes if\r\n              rep_name.casefold() in recipe['title'].casefold() or rep_name.casefold() in recipe[\r\n                  'ingredients'].casefold()]\r\n    # for recipe in recipes:\r\n    #    if rep_name in recipes:\r\n    #        break\r\n\r\n    return jsonify({'recipe': recipe})  # can change array position from 0 - 4\r\n    # original return jsonify({'recipe': recipe})\r\n\r\n\r\n# Connect to database\r\ndef get_db_connection():\r\n    # conn = sqlite3.connect('flavor_api_database.db')\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n    # conn.row_factory = sqlite3.Row\r\n    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\r\n\r\n    print(\"Connecting to database...\")\r\n    return cur\r\n\r\n\r\ndef get_recipe(rep_name):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n    post = conn.execute('SELECT *FROM recipes WHERE title = %s', {'recipe': rep_name}).fetchone()\r\n    conn.close()\r\n    if post is None:\r\n        abort(404)\r\n    return post\r\n\r\n\r\n# Modify recipe\r\n@app.route(\"/flavors/api/recipes/<int:rep_id>\", methods=[\"PUT\"])\r\ndef update_recipe(rep_id):\r\n    recipes_edit = request.get_json()\r\n    # code to update recipe in database by id (rep_id) postgresql using psycopg2.connect\r\n    # conn = sqlite3.connect('flavor_api_database.db')\r\n\r\n    # rep_id = request.json['rep_id']\r\n    # title = request.json.get('title', '')\r\n    # ingredients = request.json.get('ingredients', \"\")\r\n    # servings = request.json.get('servings', \"\")\r\n    # instructions = request.json.get('instructions', \"\")\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        db = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        db = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cursor = db.cursor()\r\n    cursor.execute(\r\n        \"UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s\", (\r\n            recipes_edit['title'], recipes_edit['ingredients'], recipes_edit['servings'], recipes_edit['instructions'],\r\n            rep_id))\r\n\r\n    # statement =  \"UPDATE recipes SET title = %s, ingredients = %s, servings = %s, instructions = %s WHERE rep_id = %s\"\r\n    # cursor.execute(statement, [title, ingredients, servings, instructions, rep_id])\r\n    db.commit()\r\n    return jsonify({'recipe': recipes_edit}), 201\r\n\r\n\r\n# Delete a recipe\r\n@app.route(\"/flavors/api/recipes/<int:rep_id>\", methods=['DELETE'])\r\ndef delete_recipe(rep_id):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        db = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        db = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cursor = db.cursor()\r\n    statement = \"DELETE FROM recipes WHERE rep_id = %s\"\r\n    cursor.execute(statement, [rep_id])\r\n    db.commit()\r\n    return ('Deleted'), 201\r\n\r\n\r\n@app.route('/image/<int:id>')\r\ndef image(id):\r\n    try:\r\n        DATABASE_URL = os.environ['DATABASE_URL']\r\n        conn = psycopg2.connect(DATABASE_URL, sslmode='require')\r\n    except:\r\n        conn = psycopg2.connect(\r\n            host=\"localhost\",\r\n            database=\"flavors_api\",\r\n            user=os.environ['DB_USERNAME'],\r\n            password=os.environ['DB_PASSWORD'])\r\n\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT image FROM recipes WHERE rep_id = %s', (id,))\r\n    image_data = cur.fetchone()[0]\r\n    cur.close()\r\n    conn.close()\r\n    if not image_data:\r\n        abort(404)\r\n    return app.response_class(image_data, mimetype='image/jpeg')\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n\r\n# Posted user recipe(s)\r\n# @app.route('/flavors/api/recipes', methods=['GET', 'POST'])\r\n# def api_recipe_request():\r\n\r\n# from flask_httpauth import HTTPBasicAuth\r\n\r\n# auth = HTTPBasicAuth()\r\n\r\n# @auth.get_password\r\n# def get_password(username):\r\n#    if username == 'fred':\r\n#        return 'python'\r\n#    return None
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flavorsapi.py b/flavorsapi.py
--- a/flavorsapi.py	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ b/flavorsapi.py	(date 1719590305852)
@@ -1,4 +1,4 @@
-''' #!flask/bin/python '''
+#!flask/bin/python
 # from flask_cors import CORS
 '''from flask import Flask, request, jsonify, abort, make_response, url_for, render_template, flash, redirect, send_file
 from bs4 import BeautifulSoup
Index: templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!doctype html>\r\n{% extends 'base.html' %}\r\n<!--<link rel=\"stylesheet\" href=\"{{ url_for('static', filename= 'css/style.css') }}\">-->\r\n\r\n{% block content %}\r\n    <div class=\"\">\r\n        <div class=\"egg\">\r\n            Home\r\n            <div class=\"gap\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/index.html b/templates/index.html
--- a/templates/index.html	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ b/templates/index.html	(date 1719587630616)
@@ -5,7 +5,7 @@
 {% block content %}
     <div class="">
         <div class="egg">
-            Home
+            Homepage
             <div class="gap">
             </div>
         </div>
Index: wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><<<<<<< HEAD\nfrom api.flavorsapi import app\r\n        \r\n    \r\nif __name__ == \"__main__\":\r\n    app.run()\r\n=======\nfrom flavorsapi import app\n\nif __name__ == \"__main__\":\n    app.run()\n\n>>>>>>> 09c58a23 (Initial commit)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/wsgi.py b/wsgi.py
--- a/wsgi.py	(revision 11b88253ad6c46c1bd8bbdbef3889fd5530c5326)
+++ b/wsgi.py	(date 1719588379207)
@@ -1,13 +1,5 @@
-<<<<<<< HEAD
-from api.flavorsapi import app
-        
-    
-if __name__ == "__main__":
-    app.run()
-=======
 from flavorsapi import app
 
 if __name__ == "__main__":
     app.run()
 
->>>>>>> 09c58a23 (Initial commit)
